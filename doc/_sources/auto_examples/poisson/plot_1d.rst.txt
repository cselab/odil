
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/poisson/plot_1d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_poisson_plot_1d.py:


1D Poisson
==========

This example solves the Poisson equation in 1D

.. math::
    \frac{\partial^2 u}{\partial x^2} = f

where :math:`f=\frac{\partial^2 u_\mathrm{ref}}{\partial x^2}` and
:math:`u_\mathrm{ref}` is a reference solution.

.. GENERATED FROM PYTHON SOURCE LINES 14-69



.. image-sg:: /auto_examples/poisson/images/sphx_glr_plot_1d_001.png
   :alt: plot 1d
   :srcset: /auto_examples/poisson/images/sphx_glr_plot_1d_001.png
   :class: sphx-glr-single-img





.. code-block:: default


    import odil
    import matplotlib.pyplot as plt

    def apply_bc(domain, st):
        ix, = domain.indices()
        nx, = domain.size()
        mod = domain.mod
        extrap = odil.core.extrap_quadh
        st[1] = mod.where(ix == 0, extrap(st[2], st[0], 0), st[1])
        st[2] = mod.where(ix == nx - 1, extrap(st[1], st[0], 0), st[2])


    def operator(ctx):
        dx, = ctx.step()
        u_st = [ctx.field('u'), ctx.field('u', -1), ctx.field('u', 1)]
        apply_bc(ctx.domain, u_st)
        u_xx = (u_st[2] - 2 * u_st[0] + u_st[1]) / dx**2
        return [u_xx - ctx.extra['rhs']]

    def get_ref_u(x):
        p = 5
        v = 5 * (1 - x) * x
        return (v**p / (1 + v**p))**(1 / p)

    N = 32
    domain = odil.Domain(cshape=[N], multigrid=True)
    mod = domain.mod
    x, = domain.points()
    dx, = domain.step()
    ref_u = get_ref_u(x)
    u_st = [ref_u, mod.roll(ref_u, 1, 0), mod.roll(ref_u, -1, 0)]
    apply_bc(domain, u_st)
    rhs = (u_st[2] - 2 * u_st[0] + u_st[1]) / dx**2
    state = odil.State(fields={'u': None})
    state = domain.init_state(state)
    problem = odil.Problem(operator, domain, extra={'rhs': rhs})
    opt = odil.optimizer.make_optimizer('lbfgsb', dtype=domain.dtype, mod=mod)


    def loss_grad(arrays):
        domain.arrays_to_state(arrays, state)
        loss, grads, terms, names, norms = problem.eval_loss_grad(state)
        pinfo = {'terms': terms, 'names': names, 'norms': norms, 'loss': loss}
        return loss, grads, pinfo


    opt.run(domain.arrays_from_state(state), loss_grad=loss_grad, epochs=33)
    fig, ax = plt.subplots()
    u = domain.field(state, 'u')
    ax.plot(x, u, 'o', label='ODIL')
    ax.plot(x, ref_u, label='reference')
    ax.set_xlabel('x')
    ax.set_ylabel('u')
    plt.show()


.. _sphx_glr_download_auto_examples_poisson_plot_1d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1d.py <plot_1d.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1d.ipynb <plot_1d.ipynb>`

    .. raw:: html

      <a href="https://colab.research.google.com/github/cselab/odil/blob/gh-pages/doc/_downloads/1d585bf137ffd9906e08a8ecc825a674/plot_1d.ipynb">
       <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab">
      </a>
